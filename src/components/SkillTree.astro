---
const skills = [
  {
    id: "root",
    label: "Skill Building Tree",
    icon: `<svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 512 512"><path fill="currentColor" d="M216.4 18.66c-3 35.94 12.6 64.01 28.1 88.94c15.5 24.9 30.6 47 32.2 72.3c1.2 17.3-4.6 34.5-11.5 53c-6.9 18.6-14.8 38.4-15.5 60.9l18 .6c.5-18.5 7.4-36.4 14.4-55.2c6.9-18.8 14-38.5 12.6-60.5c-2-31.5-19.8-56.3-35-80.65c-15.1-24.34-27.9-47.81-25.3-77.87zm134.2 9.52c-18.7 10.56-39.1 23.47-52.1 37.64c-7.9 8.63-12.8 17.38-13.9 25.86c-1 7.53.8 15.42 7.3 24.72c20.2-.7 35.3-13.8 45.7-33.24c8.9-16.54 13.3-37.15 13-54.98M141.7 97.64c-1.1.01-2.2.04-3.2.07c-5.7.18-11 .73-15.9 1.49c10.5 16.8 30.5 35.8 52.2 46.8c13.1 6.6 26.6 10.4 38.8 10.1c10.8-.2 20.4-3.5 29-10.9c-1.6-8.6-6.2-15.9-13.9-22.5c-8.8-7.5-21.4-13.7-35.5-18c-15.4-4.7-32.6-6.92-48.2-7.06q-1.65-.015-3.3 0M347.5 208.2c-2.1.1-4.1.3-6.1.5c-14.2 1.8-26.1 8-34.8 22.2c3.8 3.9 8.1 6 13.1 7c6.6 1.3 14.7.4 23.2-2.5c12.7-4.2 26.3-12.8 36.8-22c-10-3.3-20.5-5.2-30.3-5.2zM32 311v18h204.3c-1.1 7.3-2.8 17.7-5.5 28.8c-5 21-14.4 44.1-24.2 51.7c-12.5 9.6-29.8 10.2-49.6 7.9c-3.8-2.4-14.6-9.6-25.1-18.9c-6.4-5.6-12.4-12-16-17.6c-3.6-5.7-4.3-9.8-3.5-12.4c-.1.6-.1 0 2.2-.9c2.4-.9 6.2-1.7 10.1-2c7.8-.7 15.5 0 15.5 0l1.6-18s-2.2-.2-5.6-.3c-3.5-.1-8.1-.1-13 .3c-4.9.5-10.1 1.3-15.1 3.2c-4.9 1.9-10.55 5.4-12.74 12.1c-3.25 9.8.24 19.5 5.34 27.6c4.9 7.9 11.9 15 19 21.2c-13.6-1.9-27.53-3.1-40.68-1c-3.49-6.9-7.94-14.2-15.19-20.1c-8.92-7.3-21.63-11.8-39.25-12.2l-.38 18c14.84.3 22.78 3.7 28.25 8.2c3.71 3 6.49 6.9 9.04 11.4c-3.48 1.7-6.87 3.7-10.13 6.1c-10.6 7.9-14.53 20.9-17.66 32.2c-3.13 11.2-4.44 21-4.44 21l17.84 2.4s1.18-8.7 3.94-18.6c2.74-9.8 8.09-20.4 11.06-22.6c16.99-12.6 42.6-9.1 71.1-4.4c28.4 4.7 60 10.4 84.4-8.4c8-6.2 13.9-14.9 18.6-24.6c4.8 10.5 11.7 19.6 20 27.5c-10.7 2.7-20 7.5-28.1 13.3c-13.4 9.7-24 21.7-34.8 31.5l12 13.4c8-7.3 15.3-14.8 22.6-21.4c4.1 7.3 9.9 13.1 16.4 17.3c10.4 6.8 22.2 10.3 33 12.9l4.2-17.4c-10-2.5-20-5.7-27.3-10.5c-5.5-3.6-9.6-7.7-12-13.6c10.1-6.5 20.8-10.4 35.4-9.6c6.5 3.7 13.3 7 20.3 9.8c26.6 10.5 56.4 14.4 82.5 12c16.4-1.6 32.8-11 47.4-22c6.6 5.3 12 11.7 15.7 18c5.3 9 6.5 17.7 5.3 21.6l17 5.6c4-11.7.2-24.5-6.8-36.4c-4.3-7.2-9.9-14.1-16.8-20.3c.1 0 .1-.1.2-.1c18-15.1 31.3-29.8 31.3-29.8l-13.2-12.2s-12.8 13.9-29.7 28.2c-17 14.3-38.8 28.2-52 29.4c-23 2.2-50.6-1.4-74.3-10.8c-23.6-9.3-43-24.2-51.9-43.8c-2.6-5.7.7-22 7.1-36c3-6.6 6.2-12.5 8.8-17q5.7 3 12.9 7.2c13 7.6 27.9 18 34.1 25.5c4.6 5.5 10.6 18.6 14.7 29.7c4.1 11.2 6.7 20.5 6.7 20.5l17.4-4.8s-2.8-10-7.2-21.9c-2.8-7.9-6.2-16.5-10.5-24.2c4.1-.6 9.5-.6 15.7.6c12.2 2.4 26.8 8.5 39 17.5l10.6-14.6c-14.5-10.5-31-17.6-46.2-20.5c-5.7-1.1-11.3-1.8-16.7-1.6c-5.1.1-9.9 1-14.2 2.8c-9.5-9.3-22.6-17.6-34.2-24.5c-.8-.5-1.6-.9-2.4-1.4H480v-18z"/></svg>`,
    x: 400, y: 240,
    connections: ["electrical", "programming", "design", "coursework", "softskills"]
  },
  {
    id: "electrical",
    label: "Electrical",
    icon: `<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 512 512"><path fill="currentColor" d="m256 32l-64 96l80 16l-16 80l64-96l-80-16zm-96 217c-1.9 0-9.8 3-15.8 6.7c-2.8 1.7-5.3 3.5-7.2 4.8v119c1.9 1.3 4.4 3.1 7.2 4.8c6 3.7 13.9 6.7 15.8 6.7s9.8-3 15.8-6.7c5.9-3.7 10.6-7.3 10.6-7.3l2.5-2H201V265h-12.1l-2.5-2s-4.7-3.6-10.6-7.3c-6-3.7-13.9-6.7-15.8-6.7m192 0c-1.9 0-9.8 3-15.8 6.7c-5.9 3.7-10.6 7.3-10.6 7.3l-2.5 2H311v110h12.1l2.5 2s4.7 3.6 10.6 7.3c6 3.7 13.9 6.7 15.8 6.7s9.8-3 15.8-6.7c2.8-1.7 5.3-3.5 7.2-4.8v-119c-1.9-1.3-4.4-3.1-7.2-4.8c-6-3.7-13.9-6.7-15.8-6.7m-133 16v110h14V265zm32 0v110h42V265zM95.5 311c-18.8 0-36.6 9.2-49.94 22.7C32.22 347.1 23 365 23 384v106h18V384c0-13 6.78-27.1 17.32-37.7C68.85 335.8 82.8 329 95.5 329H119v-18zm297.5 0v18h22.9c13.1 0 27.1 6.8 37.7 17.4S471 371 471 384v106h18V384c0-19-9.2-37-22.7-50.4c-13.4-13.4-31.4-22.6-50.4-22.6z"/></svg>`,
    x: 400, y: 100, connections: []
  },
  {
    id: "programming",
    label: "Programming",
    icon: `<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24"><path fill="currentColor" fill-rule="evenodd" d="M3.464 3.464C2 4.93 2 7.286 2 12s0 7.071 1.464 8.535C4.93 22 7.286 22 12 22s7.071 0 8.535-1.465C22 19.072 22 16.714 22 12s0-7.071-1.465-8.536C19.072 2 16.714 2 12 2S4.929 2 3.464 3.464m2.96 6.056a.75.75 0 0 1 1.056-.096l.277.23c.605.504 1.12.933 1.476 1.328c.379.42.674.901.674 1.518s-.295 1.099-.674 1.518c-.356.395-.871.824-1.476 1.328l-.277.23a.75.75 0 1 1-.96-1.152l.234-.195c.659-.55 1.09-.91 1.366-1.216c.262-.29.287-.427.287-.513s-.025-.222-.287-.513c-.277-.306-.707-.667-1.366-1.216l-.234-.195a.75.75 0 0 1-.096-1.056M17.75 15a.75.75 0 0 1-.75.75h-5a.75.75 0 0 1 0-1.5h5a.75.75 0 0 1 .75.75" clip-rule="evenodd"/></svg>`,
    x: 120, y: 240, connections: []
  },
  {
    id: "design",
    label: "Design",
    icon: `<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32"><path fill="currentColor" d="M18 9h-4a2 2 0 0 0-2 2v12h2v-5h4v5h2V11a2 2 0 0 0-2-2m-4 7v-5h4v5zm12 7h-4V9h4a4 4 0 0 1 4 4v6a4 4 0 0 1-4 4m-2-2h2a2 2 0 0 0 2-2v-6a2 2 0 0 0-2-2h-2zm-14 2H4a2 2 0 0 1-2-2V11a2 2 0 0 1 2-2h6v2H4v10h6z"/></svg>`,
    x: 250, y: 400, connections: []
  },
  {
    id: "coursework",
    label: "Coursework",
    icon: `<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 20 20"><path fill="currentColor" d="M10.394 2.08a1 1 0 0 0-.788 0l-7 3a1 1 0 0 0 0 1.84L5.25 8.051a1 1 0 0 1 .356-.257l4-1.714a1 1 0 1 1 .788 1.838l-2.727 1.17l1.94.831a1 1 0 0 0 .787 0l7-3a1 1 0 0 0 0-1.838zM3.31 9.397L5 10.12v4.102a9 9 0 0 0-1.05-.174a1 1 0 0 1-.89-.89a11.1 11.1 0 0 1 .25-3.762m5.99 7.177A9 9 0 0 0 7 14.935v-3.957l1.818.78a3 3 0 0 0 2.364 0l5.508-2.361a11 11 0 0 1 .25 3.762a1 1 0 0 1-.89.89a8.97 8.97 0 0 0-5.35 2.524a1 1 0 0 1-1.4 0M6 18a1 1 0 0 0 1-1v-2.065a9 9 0 0 0-2-.712V17a1 1 0 0 0 1 1"/></svg>`,
    x: 550, y: 400, connections: []
  },
  {
    id: "softskills",
    label: "Soft Skills",
    icon: `<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 20 20"><g fill="currentColor"><path d="M7.75 2.75a.75.75 0 0 0-1.5 0v1.258a32.987 32.987 0 0 0-3.599.278a.75.75 0 1 0 .198 1.487A31.545 31.545 0 0 1 8.7 5.545A19.381 19.381 0 0 1 7 9.56a19.418 19.418 0 0 1-1.002-2.05a.75.75 0 0 0-1.384.577a20.935 20.935 0 0 0 1.492 2.91a19.613 19.613 0 0 1-3.828 4.154a.75.75 0 1 0 .945 1.164A21.116 21.116 0 0 0 7 12.331c.095.132.192.262.29.391a.75.75 0 0 0 1.194-.91a18.97 18.97 0 0 1-.59-.815a20.888 20.888 0 0 0 2.333-5.332c.31.031.618.068.924.108a.75.75 0 0 0 .198-1.487a32.832 32.832 0 0 0-3.599-.278V2.75Z"/><path fill-rule="evenodd" d="M13 8a.75.75 0 0 1 .671.415l4.25 8.5a.75.75 0 1 1-1.342.67L15.787 16h-5.573l-.793 1.585a.75.75 0 1 1-1.342-.67l4.25-8.5A.75.75 0 0 1 13 8Zm2.037 6.5L13 10.427L10.964 14.5h4.073Z" clip-rule="evenodd"/></g></svg>`,
    x: 680, y: 240, connections: []
  }
];
---

<div class="skill-tree">
  <svg id="skillCanvas" class="skill-tree__canvas" viewBox="0 0 800 600" role="img" aria-label="Interactive skill tree">
    <defs>
      <filter id="nodeShadow" x="-20%" y="-20%" width="140%" height="140%">
        <feDropShadow dx="0" dy="6" stdDeviation="6" flood-color="#0f172a" flood-opacity="0.16" />
      </filter>
    </defs>
    <g id="connectionsGroup"></g>
    <g id="nodesGroup"></g>
  </svg>
</div>
<script is:inline>
(() => {
  // Only the nodes from your screenshot, with SVG markup for each icon
  const skills = [
    {
      id: "root",
      label: "Skill Building Tree",
      icon: `<svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 512 512"><path fill="currentColor" d="M216.4 18.66c-3 35.94 12.6 64.01 28.1 88.94c15.5 24.9 30.6 47 32.2 72.3c1.2 17.3-4.6 34.5-11.5 53c-6.9 18.6-14.8 38.4-15.5 60.9l18 .6c.5-18.5 7.4-36.4 14.4-55.2c6.9-18.8 14-38.5 12.6-60.5c-2-31.5-19.8-56.3-35-80.65c-15.1-24.34-27.9-47.81-25.3-77.87zm134.2 9.52c-18.7 10.56-39.1 23.47-52.1 37.64c-7.9 8.63-12.8 17.38-13.9 25.86c-1 7.53.8 15.42 7.3 24.72c20.2-.7 35.3-13.8 45.7-33.24c8.9-16.54 13.3-37.15 13-54.98M141.7 97.64c-1.1.01-2.2.04-3.2.07c-5.7.18-11 .73-15.9 1.49c10.5 16.8 30.5 35.8 52.2 46.8c13.1 6.6 26.6 10.4 38.8 10.1c10.8-.2 20.4-3.5 29-10.9c-1.6-8.6-6.2-15.9-13.9-22.5c-8.8-7.5-21.4-13.7-35.5-18c-15.4-4.7-32.6-6.92-48.2-7.06q-1.65-.015-3.3 0M347.5 208.2c-2.1.1-4.1.3-6.1.5c-14.2 1.8-26.1 8-34.8 22.2c3.8 3.9 8.1 6 13.1 7c6.6 1.3 14.7.4 23.2-2.5c12.7-4.2 26.3-12.8 36.8-22c-10-3.3-20.5-5.2-30.3-5.2zM32 311v18h204.3c-1.1 7.3-2.8 17.7-5.5 28.8c-5 21-14.4 44.1-24.2 51.7c-12.5 9.6-29.8 10.2-49.6 7.9c-3.8-2.4-14.6-9.6-25.1-18.9c-6.4-5.6-12.4-12-16-17.6c-3.6-5.7-4.3-9.8-3.5-12.4c-.1.6-.1 0 2.2-.9c2.4-.9 6.2-1.7 10.1-2c7.8-.7 15.5 0 15.5 0l1.6-18s-2.2-.2-5.6-.3c-3.5-.1-8.1-.1-13 .3c-4.9.5-10.1 1.3-15.1 3.2c-4.9 1.9-10.55 5.4-12.74 12.1c-3.25 9.8.24 19.5 5.34 27.6c4.9 7.9 11.9 15 19 21.2c-13.6-1.9-27.53-3.1-40.68-1c-3.49-6.9-7.94-14.2-15.19-20.1c-8.92-7.3-21.63-11.8-39.25-12.2l-.38 18c14.84.3 22.78 3.7 28.25 8.2c3.71 3 6.49 6.9 9.04 11.4c-3.48 1.7-6.87 3.7-10.13 6.1c-10.6 7.9-14.53 20.9-17.66 32.2c-3.13 11.2-4.44 21-4.44 21l17.84 2.4s1.18-8.7 3.94-18.6c2.74-9.8 8.09-20.4 11.06-22.6c16.99-12.6 42.6-9.1 71.1-4.4c28.4 4.7 60 10.4 84.4-8.4c8-6.2 13.9-14.9 18.6-24.6c4.8 10.5 11.7 19.6 20 27.5c-10.7 2.7-20 7.5-28.1 13.3c-13.4 9.7-24 21.7-34.8 31.5l12 13.4c8-7.3 15.3-14.8 22.6-21.4c4.1 7.3 9.9 13.1 16.4 17.3c10.4 6.8 22.2 10.3 33 12.9l4.2-17.4c-10-2.5-20-5.7-27.3-10.5c-5.5-3.6-9.6-7.7-12-13.6c10.1-6.5 20.8-10.4 35.4-9.6c6.5 3.7 13.3 7 20.3 9.8c26.6 10.5 56.4 14.4 82.5 12c16.4-1.6 32.8-11 47.4-22c6.6 5.3 12 11.7 15.7 18c5.3 9 6.5 17.7 5.3 21.6l17 5.6c4-11.7.2-24.5-6.8-36.4c-4.3-7.2-9.9-14.1-16.8-20.3c.1 0 .1-.1.2-.1c18-15.1 31.3-29.8 31.3-29.8l-13.2-12.2s-12.8 13.9-29.7 28.2c-17 14.3-38.8 28.2-52 29.4c-23 2.2-50.6-1.4-74.3-10.8c-23.6-9.3-43-24.2-51.9-43.8c-2.6-5.7.7-22 7.1-36c3-6.6 6.2-12.5 8.8-17q5.7 3 12.9 7.2c13 7.6 27.9 18 34.1 25.5c4.6 5.5 10.6 18.6 14.7 29.7c4.1 11.2 6.7 20.5 6.7 20.5l17.4-4.8s-2.8-10-7.2-21.9c-2.8-7.9-6.2-16.5-10.5-24.2c4.1-.6 9.5-.6 15.7.6c12.2 2.4 26.8 8.5 39 17.5l10.6-14.6c-14.5-10.5-31-17.6-46.2-20.5c-5.7-1.1-11.3-1.8-16.7-1.6c-5.1.1-9.9 1-14.2 2.8c-9.5-9.3-22.6-17.6-34.2-24.5c-.8-.5-1.6-.9-2.4-1.4H480v-18z"/></svg>`,
      x: 400, y: 240,
      connections: ["electrical", "programming", "design", "coursework", "softskills"]
    },
    {
      id: "electrical",
      label: "Electrical",
      icon: `<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 512 512"><path fill="currentColor" d="m256 32l-64 96l80 16l-16 80l64-96l-80-16zm-96 217c-1.9 0-9.8 3-15.8 6.7c-2.8 1.7-5.3 3.5-7.2 4.8v119c1.9 1.3 4.4 3.1 7.2 4.8c6 3.7 13.9 6.7 15.8 6.7s9.8-3 15.8-6.7c5.9-3.7 10.6-7.3 10.6-7.3l2.5-2H201V265h-12.1l-2.5-2s-4.7-3.6-10.6-7.3c-6-3.7-13.9-6.7-15.8-6.7m192 0c-1.9 0-9.8 3-15.8 6.7c-5.9 3.7-10.6 7.3-10.6 7.3l-2.5 2H311v110h12.1l2.5 2s4.7 3.6 10.6 7.3c6 3.7 13.9 6.7 15.8 6.7s9.8-3 15.8-6.7c2.8-1.7 5.3-3.5 7.2-4.8v-119c-1.9-1.3-4.4-3.1-7.2-4.8c-6-3.7-13.9-6.7-15.8-6.7m-133 16v110h14V265zm32 0v110h42V265zM95.5 311c-18.8 0-36.6 9.2-49.94 22.7C32.22 347.1 23 365 23 384v106h18V384c0-13 6.78-27.1 17.32-37.7C68.85 335.8 82.8 329 95.5 329H119v-18zm297.5 0v18h22.9c13.1 0 27.1 6.8 37.7 17.4S471 371 471 384v106h18V384c0-19-9.2-37-22.7-50.4c-13.4-13.4-31.4-22.6-50.4-22.6z"/></svg>`,
      x: 400, y: 100, connections: []
    },
    {
      id: "programming",
      label: "Programming",
      icon: `<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24"><path fill="currentColor" fill-rule="evenodd" d="M3.464 3.464C2 4.93 2 7.286 2 12s0 7.071 1.464 8.535C4.93 22 7.286 22 12 22s7.071 0 8.535-1.465C22 19.072 22 16.714 22 12s0-7.071-1.465-8.536C19.072 2 16.714 2 12 2S4.929 2 3.464 3.464m2.96 6.056a.75.75 0 0 1 1.056-.096l.277.23c.605.504 1.12.933 1.476 1.328c.379.42.674.901.674 1.518s-.295 1.099-.674 1.518c-.356.395-.871.824-1.476 1.328l-.277.23a.75.75 0 1 1-.96-1.152l.234-.195c.659-.55 1.09-.91 1.366-1.216c.262-.29.287-.427.287-.513s-.025-.222-.287-.513c-.277-.306-.707-.667-1.366-1.216l-.234-.195a.75.75 0 0 1-.096-1.056M17.75 15a.75.75 0 0 1-.75.75h-5a.75.75 0 0 1 0-1.5h5a.75.75 0 0 1 .75.75" clip-rule="evenodd"/></svg>`,
      x: 120, y: 240, connections: []
    },
    {
      id: "design",
      label: "Design",
      icon: `<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32"><path fill="currentColor" d="M18 9h-4a2 2 0 0 0-2 2v12h2v-5h4v5h2V11a2 2 0 0 0-2-2m-4 7v-5h4v5zm12 7h-4V9h4a4 4 0 0 1 4 4v6a4 4 0 0 1-4 4m-2-2h2a2 2 0 0 0 2-2v-6a2 2 0 0 0-2-2h-2zm-14 2H4a2 2 0 0 1-2-2V11a2 2 0 0 1 2-2h6v2H4v10h6z"/></svg>`,
      x: 250, y: 400, connections: []
    },
    {
      id: "coursework",
      label: "Coursework",
      icon: `<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 20 20"><path fill="currentColor" d="M10.394 2.08a1 1 0 0 0-.788 0l-7 3a1 1 0 0 0 0 1.84L5.25 8.051a1 1 0 0 1 .356-.257l4-1.714a1 1 0 1 1 .788 1.838l-2.727 1.17l1.94.831a1 1 0 0 0 .787 0l7-3a1 1 0 0 0 0-1.838zM3.31 9.397L5 10.12v4.102a9 9 0 0 0-1.05-.174a1 1 0 0 1-.89-.89a11.1 11.1 0 0 1 .25-3.762m5.99 7.177A9 9 0 0 0 7 14.935v-3.957l1.818.78a3 3 0 0 0 2.364 0l5.508-2.361a11 11 0 0 1 .25 3.762a1 1 0 0 1-.89.89a8.97 8.97 0 0 0-5.35 2.524a1 1 0 0 1-1.4 0M6 18a1 1 0 0 0 1-1v-2.065a9 9 0 0 0-2-.712V17a1 1 0 0 0 1 1"/></svg>`,
      x: 550, y: 400, connections: []
    },
    {
      id: "softskills",
      label: "Soft Skills",
      icon: `<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 20 20"><g fill="currentColor"><path d="M7.75 2.75a.75.75 0 0 0-1.5 0v1.258a32.987 32.987 0 0 0-3.599.278a.75.75 0 1 0 .198 1.487A31.545 31.545 0 0 1 8.7 5.545A19.381 19.381 0 0 1 7 9.56a19.418 19.418 0 0 1-1.002-2.05a.75.75 0 0 0-1.384.577a20.935 20.935 0 0 0 1.492 2.91a19.613 19.613 0 0 1-3.828 4.154a.75.75 0 1 0 .945 1.164A21.116 21.116 0 0 0 7 12.331c.095.132.192.262.29.391a.75.75 0 0 0 1.194-.91a18.97 18.97 0 0 1-.59-.815a20.888 20.888 0 0 0 2.333-5.332c.31.031.618.068.924.108a.75.75 0 0 0 .198-1.487a32.832 32.832 0 0 0-3.599-.278V2.75Z"/><path fill-rule="evenodd" d="M13 8a.75.75 0 0 1 .671.415l4.25 8.5a.75.75 0 1 1-1.342.67L15.787 16h-5.573l-.793 1.585a.75.75 0 1 1-1.342-.67l4.25-8.5A.75.75 0 0 1 13 8Zm2.037 6.5L13 10.427L10.964 14.5h4.073Z" clip-rule="evenodd"/></g></svg>`,
      x: 680, y: 240, connections: []
    }
  ];

  const SVG_NS = "http://www.w3.org/2000/svg";
  const svg = document.getElementById("skillCanvas");
  const connectionsGroup = document.getElementById("connectionsGroup");
  const nodesGroup = document.getElementById("nodesGroup");

  if (!svg || !connectionsGroup || !nodesGroup) return;

  const initialViewBox = { x: 0, y: 0, width: 800, height: 600 };
  const viewBox = { ...initialViewBox };
  const minViewWidth = 220;
  const maxViewWidth = 1600;

  const nodesById = new Map();
  let activeNode = null;
  let isPanning = false;
  let panOriginScreen = { x: 0, y: 0 };
  let viewBoxStart = { x: 0, y: 0 };
  let panned = false;
  let skipBackgroundClick = false;

  applyViewBox();

  skills.forEach((skill) => {
    const group = document.createElementNS(SVG_NS, "g");
    group.classList.add("skill-node");
    group.setAttribute("data-skill-id", skill.id);

    // Add the icon using <foreignObject> to embed HTML (SVG markup)
    const iconSize = skill.id === "root" ? 64 : 38;
    const foreignObject = document.createElementNS(SVG_NS, "foreignObject");
    foreignObject.setAttribute("x", skill.x - iconSize / 2);
    foreignObject.setAttribute("y", skill.y - iconSize - 6);
    foreignObject.setAttribute("width", iconSize);
    foreignObject.setAttribute("height", iconSize);

    const iconDiv = document.createElement("div");
    iconDiv.style.display = "flex";
    iconDiv.style.justifyContent = "center";
    iconDiv.style.alignItems = "center";
    iconDiv.style.width = `${iconSize}px`;
    iconDiv.style.height = `${iconSize}px`;

    // Insert SVG markup directly
    iconDiv.innerHTML = skill.icon;
    foreignObject.appendChild(iconDiv);

    // Add the label below the icon
    const label = document.createElementNS(SVG_NS, "text");
    label.setAttribute("x", skill.x);
    label.setAttribute("y", skill.y + iconSize / 2 + 18);
    label.setAttribute("text-anchor", "middle");
    label.setAttribute("dominant-baseline", "middle");
    label.classList.add("skill-node__label");
    label.setAttribute("fill", "var(--color-accent)");
    label.textContent = skill.label;

    group.append(foreignObject, label);
    nodesGroup.appendChild(group);

    group.addEventListener("click", (event) => {
      event.stopPropagation();
      skipBackgroundClick = false;
      toggleActive(group);
    });

    group.addEventListener("mouseenter", () => {
      label.setAttribute("fill", "var(--color-accent)");
    });
    group.addEventListener("mouseleave", () => {
      label.setAttribute("fill", "var(--color-accent)");
    });

    nodesById.set(skill.id, {
      center: { x: skill.x, y: skill.y }
    });
  });

  drawConnections();

  svg.addEventListener("click", (event) => {
    if (skipBackgroundClick) {
      skipBackgroundClick = false;
      return;
    }
    if (event.target.closest(".skill-node")) {
      return;
    }
    if (activeNode) {
      activeNode.classList.remove("node--active");
      activeNode = null;
    }
  });

  svg.addEventListener("mousedown", (event) => {
    if (event.button !== 0) return;
    if (event.target.closest(".skill-node")) {
      skipBackgroundClick = false;
      return;
    }
    isPanning = true;
    panned = false;
    skipBackgroundClick = false;
    svg.classList.add("is-panning");
    panOriginScreen = { x: event.clientX, y: event.clientY };
    viewBoxStart = { x: viewBox.x, y: viewBox.y };
  });

  window.addEventListener("mousemove", (event) => {
    if (!isPanning) return;
    const rect = svg.getBoundingClientRect();
    const dxScreen = event.clientX - panOriginScreen.x;
    const dyScreen = event.clientY - panOriginScreen.y;
    const dx = dxScreen * (viewBox.width / rect.width);
    const dy = dyScreen * (viewBox.height / rect.height);
    if (!panned && (Math.abs(dx) > 0.5 || Math.abs(dy) > 0.5)) {
      panned = true;
    }
    viewBox.x = viewBoxStart.x - dx;
    viewBox.y = viewBoxStart.y - dy;
    applyViewBox();
  });

  window.addEventListener("mouseup", () => {
    if (!isPanning) return;
    isPanning = false;
    svg.classList.remove("is-panning");
    if (panned) {
      skipBackgroundClick = true;
    }
  });

  svg.addEventListener("wheel", (event) => {
    event.preventDefault();
    const pointer = getEventPoint(event);
    const zoomIn = event.deltaY < 0;

    const prevWidth = viewBox.width;
    const prevHeight = viewBox.height;
    const targetWidth = prevWidth * (zoomIn ? 0.85 : 1.15);
    const clampedWidth = clamp(targetWidth, minViewWidth, maxViewWidth);
    const scale = clampedWidth / prevWidth;
    const newHeight = prevHeight * scale;

    viewBox.x = pointer.x - (pointer.x - viewBox.x) * scale;
    viewBox.y = pointer.y - (pointer.y - viewBox.y) * scale;
    viewBox.width = clampedWidth;
    viewBox.height = newHeight;

    applyViewBox();
  }, { passive: false });

  function applyViewBox() {
    svg.setAttribute("viewBox", `${viewBox.x} ${viewBox.y} ${viewBox.width} ${viewBox.height}`);
  }

  function drawConnections() {
    connectionsGroup.replaceChildren();
    skills.forEach((skill) => {
      const source = nodesById.get(skill.id);
      if (!source || !skill.connections) return;
      skill.connections.forEach((targetId) => {
        const target = nodesById.get(targetId);
        if (!target) return;
        const line = document.createElementNS(SVG_NS, "line");
        line.classList.add("skill-connection");
        line.setAttribute("x1", source.center.x);
        line.setAttribute("y1", source.center.y);
        line.setAttribute("x2", target.center.x);
        line.setAttribute("y2", target.center.y);
        connectionsGroup.appendChild(line);
      });
    });
  }

  function getEventPoint(event) {
    const rect = svg.getBoundingClientRect();
    return {
      x: viewBox.x + ((event.clientX - rect.left) / rect.width) * viewBox.width,
      y: viewBox.y + ((event.clientY - rect.top) / rect.height) * viewBox.height
    };
  }

  function toggleActive(group) {
    if (activeNode === group) {
      group.classList.remove("node--active");
      activeNode = null;
      return;
    }
    if (activeNode) {
      activeNode.classList.remove("node--active");
    }
    group.classList.add("node--active");
    activeNode = group;
  }

  function clamp(value, min, max) {
    return Math.min(Math.max(value, min), max);
  }
})();
</script>
<style>
.skill-tree {
  width: 100%;
  min-height: 480px;
  display: flex;
  align-items: stretch;
  justify-content: center;
  padding: 1.2rem 1rem;
  box-sizing: border-box;
  background: transparent;
}

.skill-tree__canvas {
  width: 100%;
  height: clamp(420px, 55vw, 620px);
  background: transparent;
  border-radius: 16px;
  cursor: grab;
  user-select: none;
  -webkit-user-select: none;
  touch-action: none;
  transition: background 0.24s ease;
}

.skill-tree__canvas.is-panning {
  cursor: grabbing;
}

.skill-connection {
  stroke: color-mix(in srgb, var(--color-accent, #7df5f5) 60%, transparent);
  stroke-width: 2;
  stroke-linecap: round;
  pointer-events: none;
}

.skill-node {
  cursor: pointer;
  transition: transform 0.2s cubic-bezier(.4,0,.2,1);
}

.skill-node:hover,
.skill-node.node--active {
  transform: translateY(-4px) scale(1.04);
}

.skill-node__label {
  font-family: "Inter", "Segoe UI", system-ui, -apple-system, sans-serif;
  font-size: 18px;
  font-weight: 700;
  letter-spacing: 0.01em;
  fill: var(--color-text-inverse, #fff);
  paint-order: stroke fill;
  stroke: rgba(255, 255, 255, 0.55);
  stroke-width: 2px;
  stroke-linejoin: round;
  filter: drop-shadow(0 2px 6px rgba(0,0,0,0.25));
  pointer-events: none;
  transition: fill 0.2s;
}

.skill-node:hover .skill-node__label,
.skill-node.node--active .skill-node__label {
  fill: var(--color-accent, #7df5f5);
  stroke: rgba(235, 235, 235, 0.75);
}

@media (max-width: 900px) {
  .skill-tree {
    min-height: 420px;
    padding: 1rem;
  }

  .skill-tree__canvas {
    height: clamp(360px, 65vw, 520px);
  }

  .skill-node__label {
    font-size: 15px;
  }
}
</style>
