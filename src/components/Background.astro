---
import '../styles/Background.css';

const { class: className = '' } = Astro.props;
---

<section
  aria-hidden="true"
  class={`background ${className}`.trim()}
  data-background
  style="position: fixed; top: 0; left: 0; width: 100%; height: 120vh; z-index: -10; overflow: hidden; background: url('/banner.png') center top / cover no-repeat;"
>
  <div class="background__overlay" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; background: linear-gradient(135deg, rgba(0, 0, 0, 0.7) 0%, rgba(0, 0, 0, 0.5) 50%, rgba(0, 0, 0, 0.7) 100%); z-index: 1;"></div>
</section>

<script>
  function initBackgroundParallax() {
    const backgroundElement = document.querySelector('[data-background]') as HTMLElement;
    
    if (!backgroundElement) return;
    
    // Calculate the maximum parallax offset to prevent running out of image
    let maxParallaxOffset = 0;
    
    function calculateMaxOffset() {
      const viewportHeight = window.innerHeight;
      const documentHeight = document.documentElement.scrollHeight;
      const maxScroll = documentHeight - viewportHeight;
      
      // Calculate how much extra height we have (120vh - 100vh = 20vh)
      const extraHeight = viewportHeight * 0.2;
      
      // Set max offset to prevent showing background beyond image
      maxParallaxOffset = extraHeight;
    }
    
    function updateParallax() {
      const scrollY = window.scrollY;
      // Move the background at 70% of scroll speed for subtle parallax effect
      const parallaxOffset = scrollY * 0.7;
      
      // Clamp the offset to prevent running out of image
      const yPos = -Math.min(parallaxOffset, maxParallaxOffset);
      
      backgroundElement.style.backgroundPosition = `center ${yPos}px`;
    }
    
    // Calculate initial max offset
    calculateMaxOffset();
    
    // Initialize
    updateParallax();
    
    // Add scroll listener
    window.addEventListener('scroll', updateParallax, { passive: true });
    
    // Recalculate on resize
    window.addEventListener('resize', () => {
      calculateMaxOffset();
      updateParallax();
    });
    
    console.log('Background parallax initialized with max offset:', maxParallaxOffset);
  }
  
  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initBackgroundParallax);
  } else {
    initBackgroundParallax();
  }
</script>

<style>
  /* Override the body background color */
  :global(body) {
    background-color: transparent !important;
  }
</style>

<script>
  // Simple parallax function
  function initBackgroundParallax() {
    const container = document.querySelector('[data-background-container]') as HTMLElement;
    const image = document.querySelector('[data-background-image]') as HTMLImageElement;
    
    if (!container || !image) return;
    
    let maxShift = 0;
    let displayHeight = 0;
    
    function computeShift() {
      if (!image || !container) return;
      
      const { naturalWidth, naturalHeight } = image;
      if (!naturalWidth || !naturalHeight) return;
      
      const containerRect = container.getBoundingClientRect();
      const scale = Math.max(
        containerRect.width / naturalWidth,
        containerRect.height / naturalHeight
      );
      
      displayHeight = naturalHeight * scale;
      maxShift = Math.max(0, displayHeight - containerRect.height);
    }
    
    function updateParallax() {
      if (!image) return;
      
      const scrollY = window.scrollY;
      const offset = Math.min(maxShift, scrollY * 0.5);
      
      image.style.transform = `translate3d(-50%, -${offset}px, 0)`;
      if (displayHeight > 0) {
        image.style.height = `${displayHeight}px`;
      }
    }
    
    // Initialize
    computeShift();
    updateParallax();
    
    // Event listeners
    window.addEventListener('scroll', updateParallax, { passive: true });
    window.addEventListener('resize', () => {
      computeShift();
      updateParallax();
    });
    
    // Handle image load
    if (image.complete) {
      computeShift();
      updateParallax();
    } else {
      image.addEventListener('load', () => {
        computeShift();
        updateParallax();
      });
    }
  }
  
  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initBackgroundParallax);
  } else {
    initBackgroundParallax();
  }
</script>


