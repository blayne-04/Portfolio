---
import bannerImage from '../../public/banner.png';
import '../styles/Background.css';

const { class: className = '' } = Astro.props;
---
<section
  aria-hidden="true"
  class={`background ${className}`.trim()}
  x-data="{
    scrollY: 0,
    maxShift: 0,
    displayHeight: null,
    updateFromScroll() {
      this.scrollY = window.scrollY;
    },
    computeShift() {
      const container = this.$refs.container;
      const img = this.$refs.image;
      if (!container || !img) return;
      const { naturalWidth, naturalHeight } = img;
      if (!naturalWidth || !naturalHeight) return;
      const scale = Math.max(
        container.offsetWidth / naturalWidth,
        container.offsetHeight / naturalHeight
      );
      const displayHeight = naturalHeight * scale;
      this.displayHeight = displayHeight;
      this.maxShift = Math.max(0, displayHeight - container.offsetHeight);
    },
    parallaxStyle() {
      const offset = Math.min(this.maxShift, this.scrollY * 0.3);
      return {
        transform: `translateY(-${offset}px)`,
        height: this.displayHeight ? `${this.displayHeight}px` : undefined,
      };
    },
  }"
  x-init="updateFromScroll(); computeShift()"
  @scroll.window="updateFromScroll()"
  @resize.window="computeShift()"
>
  <div class="background__inner" data-background-container>
    <img
      data-background-image
      src={bannerImage.src}
      width={bannerImage.width}
      height={bannerImage.height}
      alt="Mountain skyline"
      class="background__image"
    />
    <div class="background__overlay"></div>
  </div>
</section>

<script type="module">
  const initBackgroundParallax = () => {
    const sections = Array.from(document.querySelectorAll('[data-background]'));
    if (!sections.length) {
      return;
    }

    const states = sections
      .map((section) => {
        const container = section.querySelector('[data-background-container]');
        const image = section.querySelector('[data-background-image]');
        if (!container || !image) {
          return null;
        }
        return { container, image, maxShift: 0 };
      })
      .filter(Boolean);

    if (!states.length) {
      return;
    }

    let rafId = null;

    const applyTransforms = () => {
      const scrollY = window.scrollY;
      states.forEach((state) => {
        const offset = Math.min(state.maxShift, scrollY * 0.3);
        state.image.style.transform = 'translateY(-' + offset + 'px)';
      });
    };

    const queueUpdate = () => {
      if (rafId !== null) {
        return;
      }
      rafId = requestAnimationFrame(() => {
        rafId = null;
        applyTransforms();
      });
    };

    const computeState = (state) => {
      const { image, container } = state;
      const { naturalWidth, naturalHeight } = image;
      if (!naturalWidth || !naturalHeight) {
        return false;
      }
      const scale = Math.max(
        container.offsetWidth / naturalWidth,
        container.offsetHeight / naturalHeight
      );
      const displayHeight = naturalHeight * scale;
      image.style.height = ${displayHeight}px;
      state.maxShift = Math.max(0, displayHeight - container.offsetHeight);
      return true;
    };

    const recomputeAll = () => {
      states.forEach((state) => {
        state.image.style.height = '';
        computeState(state);
      });
      queueUpdate();
    };

    window.addEventListener('scroll', queueUpdate, { passive: true });
    window.addEventListener('resize', recomputeAll);

    states.forEach((state) => {
      const handleLoad = () => {
        if (computeState(state)) {
          queueUpdate();
        }
      };

      if (state.image.complete) {
        handleLoad();
      } else {
        state.image.addEventListener('load', handleLoad, { once: true });
      }
    });

    queueUpdate();
  };

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initBackgroundParallax, { once: true });
  } else {
    initBackgroundParallax();
  }
</script>


